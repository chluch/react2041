{"version":3,"sources":["controls.js","App.js","serviceWorker.js","index.js"],"names":["moveLeft","grid","newGrid","i","length","row","j","push","n","parseInt","filter","emptySquares","moveRight","unshift","moveUp","tempGrid","col","newCol","moveDown","App","useState","currentGrid","updateGrid","status","gameStatus","setGameStatus","getRandomInt","max","Math","floor","random","ceil","checkMoved","prevGrid","currGrid","JSON","stringify","move","direction","some","includes","checkWin","empty","getEmptySquares","randomNum","randomCoord","generateNewSquares","checkMovesLeft","handleKeyDown","e","preventDefault","keyCode","console","log","useEffect","window","onkeydown","squareClassMap","2","4","8","16","32","64","128","256","512","1024","2048","className","map","index","key","square","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAAO,SAASA,EAASC,GAErB,IADA,IAAIC,EAAU,GACLC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CAElC,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAIL,EAAKG,OAAQE,IACV,KAAfL,EAAKE,GAAGG,IACRD,EAAIE,KAAKN,EAAKE,GAAGG,IAIzB,IAAK,IAAIE,EAAI,EAAGA,EAAIH,EAAID,OAAQI,IACxBH,EAAIG,KAAOH,EAAIG,EAAI,KACnBH,EAAIG,GAAKC,SAASJ,EAAIG,IAAMC,SAASJ,EAAIG,EAAI,IAC7CH,EAAIG,EAAI,GAAK,IAIrBH,EAAMA,EAAIK,QAAO,SAACF,GAAD,OAAOA,KAGxB,IADA,IAAIG,EAAeV,EAAKG,OAASC,EAAID,OAC9BO,EAAe,GAClBN,EAAIE,KAAK,IACTI,GAAgB,EAEpBT,EAAQK,KAAKF,GAEjB,OAAOH,EAGJ,SAASU,EAAUX,GAEtB,IADA,IAAIC,EAAU,GACLC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CAElC,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAIL,EAAKG,OAAQE,IACV,KAAfL,EAAKE,GAAGG,IACRD,EAAIE,KAAKN,EAAKE,GAAGG,IAIzB,IAAK,IAAIE,EAAIH,EAAID,OAAQI,EAAI,EAAGA,IACxBH,EAAIG,KAAOH,EAAIG,EAAI,KACnBH,EAAIG,GAAKC,SAASJ,EAAIG,IAAMC,SAASJ,EAAIG,EAAI,IAC7CH,EAAIG,EAAI,GAAK,IAIrBH,EAAMA,EAAIK,QAAO,SAACF,GAAD,OAAOA,KAGxB,IADA,IAAIG,EAAeV,EAAKG,OAASC,EAAID,OAC9BO,EAAe,GAClBN,EAAIQ,QAAQ,IACZF,GAAgB,EAEpBT,EAAQK,KAAKF,GAEjB,OAAOH,EAGJ,SAASY,EAAOb,GAGnB,IAFA,IAAIC,EAAU,GACVa,EAAW,GACNZ,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CAElC,IADA,IAAIa,EAAM,GACDV,EAAI,EAAGA,EAAIL,EAAKG,OAAQE,IACV,KAAfL,EAAKK,GAAGH,IACRa,EAAIT,KAAKN,EAAKK,GAAGH,IAIzB,IAAK,IAAIK,EAAI,EAAGA,EAAIQ,EAAIZ,OAAQI,IACxBQ,EAAIR,KAAOQ,EAAIR,EAAI,KACnBQ,EAAIR,GAAKC,SAASO,EAAIR,IAAMC,SAASO,EAAIR,EAAI,IAC7CQ,EAAIR,EAAI,GAAK,IAIrBQ,EAAMA,EAAIN,QAAO,SAACF,GAAD,OAAOA,KAGxB,IADA,IAAIG,EAAeV,EAAKG,OAASY,EAAIZ,OAC9BO,EAAe,GAClBK,EAAIT,KAAK,IACTI,GAAgB,EAEpBI,EAASR,KAAKS,GAGlB,IAAK,IAAIb,EAAI,EAAGA,EAAIY,EAASX,OAAQD,IAAK,CAEtC,IADA,IAAIc,EAAS,GACJX,EAAI,EAAGA,EAAIS,EAASX,OAAQE,IACjCW,EAAOV,KAAKQ,EAAST,GAAGH,IAE5BD,EAAQK,KAAKU,GAEjB,OAAOf,EAGJ,SAASgB,EAASjB,GAGrB,IAFA,IAAIC,EAAU,GACVa,EAAW,GACNZ,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CAElC,IADA,IAAIa,EAAM,GACDV,EAAI,EAAGA,EAAIL,EAAKG,OAAQE,IACV,KAAfL,EAAKK,GAAGH,IACRa,EAAIT,KAAKN,EAAKK,GAAGH,IAIzB,IAAK,IAAIK,EAAIQ,EAAIZ,OAAQI,EAAI,EAAGA,IACxBQ,EAAIR,KAAOQ,EAAIR,EAAI,KACnBQ,EAAIR,GAAKC,SAASO,EAAIR,IAAMC,SAASO,EAAIR,EAAI,IAC7CQ,EAAIR,EAAI,GAAK,IAIrBQ,EAAMA,EAAIN,QAAO,SAACF,GAAD,OAAOA,KAGxB,IADA,IAAIG,EAAeV,EAAKG,OAASY,EAAIZ,OAC9BO,EAAe,GAClBK,EAAIH,QAAQ,IACZF,GAAgB,EAEpBI,EAASR,KAAKS,GAGlB,IAAK,IAAIb,EAAI,EAAGA,EAAIY,EAASX,OAAQD,IAAK,CAEtC,IADA,IAAIc,EAAS,GACJX,EAAI,EAAGA,EAAIS,EAASX,OAAQE,IACjCW,EAAOV,KAAKQ,EAAST,GAAGH,IAE5BD,EAAQK,KAAKU,GAEjB,OAAOf,E,MCyDIiB,MAxLf,WAAe,MAGqBC,oBAAS,WAQzC,MANiB,CACf,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,QATJ,mBAGNC,EAHM,KAGOC,EAHP,KAePC,EACC,cADDA,EAEE,cAFFA,EAGE,aAlBK,EAoBqBH,mBAASG,GApB9B,mBAoBRC,EApBQ,KAoBIC,EApBJ,KAuBPC,EAAe,SAACC,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKG,KAAKJ,KA6BxCK,EAAa,SAACC,EAAUC,GAC5B,OAAQC,KAAKC,UAAUH,KAAcE,KAAKC,UAAUF,IAmBhDG,EAAO,SAACpC,EAAMqC,GAClB,IAAIpC,EAAU,GA6Bd,MA5BkB,SAAdoC,EACFpC,EAAUF,EAASC,GAGE,UAAdqC,EACPpC,EAAUU,EAAUX,GAGC,OAAdqC,EACPpC,EAAUY,EAAOb,GAGI,SAAdqC,IACPpC,EAAUgB,EAASjB,IAGjB+B,EAAW/B,EAAMC,IAjCN,SAACD,GAChB,OAAOA,EAAKsC,MAAK,SAAAlC,GAAG,OAAIA,EAAImC,SAAS,SAiC/BC,CAASvC,GAIXA,EAvDqB,SAACD,GAC1B,IAAIyC,EAdkB,SAACzC,GAEvB,IADA,IAAIyC,EAAQ,GACHvC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/B,IAAK,IAAIG,EAAI,EAAGA,EAAIL,EAAKG,OAAQE,IACZ,KAAfL,EAAKE,GAAGG,IACVoC,EAAMnC,KAAK,CAACJ,EAAGG,IAIrB,OAAOoC,EAKKC,CAAgB1C,GACxB2C,EAAoC,GAAvBlB,EAAa,GAAK,GAC/BmB,EAAcH,EAAMhB,EAAagB,EAAMtC,SAE3C,OADAH,EAAK4C,EAAY,IAAIA,EAAY,IAAMD,EAChC3C,EAkDO6C,CAAmB5C,GAH7BuB,EAAcD,EAAaD,GA9BV,SAACtB,GAOtB,MANY,CACV+B,EAAW/B,EAAMD,EAASC,IAC1B+B,EAAW/B,EAAMW,EAAUX,IAC3B+B,EAAW/B,EAAMa,EAAOb,IACxB+B,EAAW/B,EAAMiB,EAASjB,KAEfuC,UAAS,GA6BfO,CAAe7C,IAClBuB,EAAcD,EAAaD,GAGxBrB,GAGH8C,EAAgB,SAACC,GAMrBA,EAAEC,iBAFW,KAGTD,EAAEE,SACJC,QAAQC,IAAI,QACZ/B,EAAWe,EAAKhB,EAAa,UARpB,KAUF4B,EAAEE,SACTC,QAAQC,IAAI,MACZ/B,EAAWe,EAAKhB,EAAa,QAXjB,KAaL4B,EAAEE,SACTC,QAAQC,IAAI,SACZ/B,EAAWe,EAAKhB,EAAa,WAdlB,KAgBJ4B,EAAEE,UACTC,QAAQC,IAAI,QACZ/B,EAAWe,EAAKhB,EAAa,WAKjCiC,qBAAU,WAGR,OAFAC,OAAOC,UAAYR,EAEZ,WACLO,OAAOC,WAAaR,MAIxBM,qBAAU,WACH9B,IAAeD,GAAiBC,IAAeD,IAClDgC,OAAOC,WAAaR,MAMxB,IAAMS,EAAiB,CACrBC,EAAG,MACHC,EAAG,OACHC,EAAG,QACHC,GAAI,UACJC,GAAI,aACJC,GAAI,aACJC,IAAK,gBACLC,IAAK,eACLC,IAAK,eACLC,KAAM,iBACNC,KAAM,OAIR,OACE,oCACE,4BAAK5C,GACL,yBAAK6C,UAAU,QAEXhD,EAAYiD,KAAI,SAACjE,EAAKkE,GAAN,OACd,yBAAKC,IAAG,aAAQD,GAASF,UAAW,OAEhChE,EAAIiE,KAAI,SAACG,EAAQF,GAAT,OACN,yBAAKC,IAAG,gBAAWD,GAASF,UAAWZ,EAAegB,IACnDA,aCrKDC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.cf1cd8a8.chunk.js","sourcesContent":["export function moveLeft(grid) {\n    let newGrid = [];\n    for (let i = 0; i < grid.length; i++) {\n        let row = [];\n        for (let j = 0; j < grid.length; j++) {\n            if (grid[i][j] !== '') {\n                row.push(grid[i][j]);\n            }\n        }\n        // Combine\n        for (let n = 0; n < row.length; n++) {\n            if (row[n] === row[n + 1]) {\n                row[n] = parseInt(row[n]) + parseInt(row[n + 1]);\n                row[n + 1] = '';\n            }\n        }\n        // Filter out falsy\n        row = row.filter((n) => n);\n        // Slide all numbers\n        let emptySquares = grid.length - row.length;\n        while (emptySquares > 0) {\n            row.push('');\n            emptySquares -= 1;\n        }\n        newGrid.push(row);\n    }\n    return newGrid;\n}\n\nexport function moveRight(grid) {\n    let newGrid = [];\n    for (let i = 0; i < grid.length; i++) {\n        let row = [];\n        for (let j = 0; j < grid.length; j++) {\n            if (grid[i][j] !== '') {\n                row.push(grid[i][j]);\n            }\n        }\n        // Combine\n        for (let n = row.length; n > 0; n--) {\n            if (row[n] === row[n - 1]) {\n                row[n] = parseInt(row[n]) + parseInt(row[n - 1]);\n                row[n - 1] = '';\n            }\n        }\n        // Filter out falsy\n        row = row.filter((n) => n);\n        // Slide all numbers\n        let emptySquares = grid.length - row.length;\n        while (emptySquares > 0) {\n            row.unshift('');\n            emptySquares -= 1;\n        }\n        newGrid.push(row);\n    }\n    return newGrid;\n}\n\nexport function moveUp(grid) {\n    let newGrid = [];\n    let tempGrid = [];\n    for (let i = 0; i < grid.length; i++) {\n        let col = [];\n        for (let j = 0; j < grid.length; j++) {\n            if (grid[j][i] !== '') {\n                col.push(grid[j][i]);\n            }\n        }\n        // Combine\n        for (let n = 0; n < col.length; n++) {\n            if (col[n] === col[n + 1]) {\n                col[n] = parseInt(col[n]) + parseInt(col[n + 1]);\n                col[n + 1] = '';\n            }\n        }\n        // Filter again\n        col = col.filter((n) => n);\n        // Slide all numbers\n        let emptySquares = grid.length - col.length;\n        while (emptySquares > 0) {\n            col.push('');\n            emptySquares -= 1;\n        }\n        tempGrid.push(col);\n    }\n    // Fill new grid at correct coordinates\n    for (let i = 0; i < tempGrid.length; i++) {\n        let newCol = [];\n        for (let j = 0; j < tempGrid.length; j++) {\n            newCol.push(tempGrid[j][i]);\n        }\n        newGrid.push(newCol);\n    }\n    return newGrid;\n}\n\nexport function moveDown(grid) {\n    let newGrid = [];\n    let tempGrid = [];\n    for (let i = 0; i < grid.length; i++) {\n        let col = [];\n        for (let j = 0; j < grid.length; j++) {\n            if (grid[j][i] !== '') {\n                col.push(grid[j][i]);\n            }\n        }\n        // Combine\n        for (let n = col.length; n > 0; n--) {\n            if (col[n] === col[n - 1]) {\n                col[n] = parseInt(col[n]) + parseInt(col[n - 1]);\n                col[n - 1] = '';\n            }\n        }\n        // Filter again\n        col = col.filter((n) => n);\n        // Slide all numbers\n        let emptySquares = grid.length - col.length;\n        while (emptySquares > 0) {\n            col.unshift('');\n            emptySquares -= 1;\n        }\n        tempGrid.push(col);\n    }\n    // Fill new grid at correct coordinates\n    for (let i = 0; i < tempGrid.length; i++) {\n        let newCol = [];\n        for (let j = 0; j < tempGrid.length; j++) {\n            newCol.push(tempGrid[j][i]);\n        }\n        newGrid.push(newCol);\n    }\n    return newGrid;\n}","import React, { useEffect, useState } from 'react';\nimport { moveLeft, moveRight, moveUp, moveDown } from './controls';\nimport './App.css';\n\nfunction App() {\n\n  // [current state, function to update the state]\n  const [currentGrid, updateGrid] = useState(() => {\n    // Only run once during initial render\n    const initGrid = [\n      [2, '', '', ''],\n      ['', '', '', ''],\n      ['', '', '', ''],\n      ['', '', '', '']\n    ];\n    return initGrid;\n  });\n\n  // Game status\n  const status = {\n    win: 'You Win! :)',\n    lose: 'You Lost ):',\n    play: 'React 2048',\n  }\n  let [gameStatus, setGameStatus] = useState(status.play);\n\n  // Random number generator\n  const getRandomInt = (max) => {\n    return Math.floor(Math.random() * Math.ceil(max));\n  }\n\n  // Find coordinates of empty squares\n  const getEmptySquares = (grid) => {\n    let empty = [];\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid.length; j++) {\n        if (grid[i][j] === '') {\n          empty.push([i, j]);\n        }\n      }\n    }\n    return empty;\n  }\n\n  // Generate a 2 or 4 in a random empty square \n  const generateNewSquares = (grid) => {\n    let empty = getEmptySquares(grid);\n    let randomNum = (getRandomInt(2) + 1) * 2;\n    let randomCoord = empty[getRandomInt(empty.length)];\n    grid[randomCoord[0]][randomCoord[1]] = randomNum;\n    return grid;\n  }\n\n  // Check if squares slided; return type: Bool\n  // This method is referenced from:\n  // https://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript\n  // Otherwise, we could loop both grids to compare\n  const checkMoved = (prevGrid, currGrid) => {\n    return (JSON.stringify(prevGrid) !== JSON.stringify(currGrid)) ? true : false;\n  }\n\n  // Check for 2048; return type: Bool\n  const checkWin = (grid) => {\n    return grid.some(row => row.includes(2048));\n  }\n\n  // Check if no moves left; return type: Bool\n  const checkMovesLeft = (grid) => {\n    let moves = [\n      checkMoved(grid, moveLeft(grid)),\n      checkMoved(grid, moveRight(grid)),\n      checkMoved(grid, moveUp(grid)),\n      checkMoved(grid, moveDown(grid))\n    ];\n    return moves.includes(true);\n  }\n\n  const move = (grid, direction) => {\n    let newGrid = []\n    if (direction === 'left') {\n      newGrid = moveLeft(grid);\n    }\n\n    else if (direction === 'right') {\n      newGrid = moveRight(grid);\n    }\n\n    else if (direction === 'up') {\n      newGrid = moveUp(grid);\n    }\n\n    else if (direction === 'down') {\n      newGrid = moveDown(grid);\n    }\n\n    if (checkMoved(grid, newGrid)) {\n      if (checkWin(newGrid)) {\n        setGameStatus(gameStatus = status.win);\n      }\n      else {\n        newGrid = generateNewSquares(newGrid);\n      }\n    } else {\n      if (!checkMovesLeft(newGrid)) {\n        setGameStatus(gameStatus = status.lose);\n      }\n    }\n    return newGrid;\n  }\n\n  const handleKeyDown = (e) => {\n    const up = 38;\n    const right = 39;\n    const down = 40;\n    const left = 37;\n\n    e.preventDefault();\n    if (e.keyCode === left) {\n      console.log('left');\n      updateGrid(move(currentGrid, 'left'));\n    }\n    else if (e.keyCode === up) {\n      console.log('up');\n      updateGrid(move(currentGrid, 'up'));\n    }\n    else if (e.keyCode === right) {\n      console.log('right');\n      updateGrid(move(currentGrid, 'right'));\n    }\n    else if (e.keyCode === down) {\n      console.log('down');\n      updateGrid(move(currentGrid, 'down'));\n    }\n  }\n\n\n  useEffect(() => {\n    window.onkeydown = handleKeyDown;\n    // Clean up\n    return () => {\n      window.onkeydown = !handleKeyDown;\n    }\n  });\n\n  useEffect(() => {\n    if ((gameStatus === status.lose) || (gameStatus === status.win)) {\n      window.onkeydown = !handleKeyDown;\n    }\n  });\n\n  // TODO: There is probably a smarter way...\n  // For CSS styling\n  const squareClassMap = {\n    2: 'two',\n    4: 'four',\n    8: 'eight',\n    16: 'sixteen',\n    32: 'thirty-two',\n    64: 'sixty-four',\n    128: 'one-two-eight',\n    256: 'two-five-six',\n    512: 'five-one-two',\n    1024: 'one-o-two-four',\n    2048: 'win',\n  }\n\n  // Render!\n  return (\n    <>\n      <h1>{gameStatus}</h1>\n      <div className=\"game\">\n        {\n          currentGrid.map((row, index) => (\n            <div key={`row${index}`} className={\"row\"}>\n              {\n                row.map((square, index) =>\n                  <div key={`square${index}`} className={squareClassMap[square]}>\n                    {square}\n                  </div>)\n              }\n            </div>\n          ))\n        }\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('main')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}